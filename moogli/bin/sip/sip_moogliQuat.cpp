/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.9
 */

#include "sipAPI_moogli.h"

#line 193 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Quat>
using namespace osg;
#line 13 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliQuat.cpp"

#line 156 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec4f>
using osg::Vec4f;
#line 18 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliQuat.cpp"
#line 93 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec3f>
using  osg::Vec3f;
#line 22 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliQuat.cpp"


extern "C" {static PyObject *meth_Quat_asVec4(PyObject *, PyObject *);}
static PyObject *meth_Quat_asVec4(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            Vec4f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4f(sipCpp->asVec4());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_asVec4, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_asVec3(PyObject *, PyObject *);}
static PyObject *meth_Quat_asVec3(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            Vec3f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec3f(sipCpp->asVec3());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec3f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_asVec3, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_set(PyObject *, PyObject *);}
static PyObject *meth_Quat_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        float a2;
        float a3;
        Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_Quat, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const Vec4f* a0;
        Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Quat, &sipCpp, sipType_Vec4f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_set, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_x(PyObject *, PyObject *);}
static PyObject *meth_Quat_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_x, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_y(PyObject *, PyObject *);}
static PyObject *meth_Quat_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_y, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_z(PyObject *, PyObject *);}
static PyObject *meth_Quat_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->z();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_z, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_w(PyObject *, PyObject *);}
static PyObject *meth_Quat_w(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->w();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_w, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_zeroRotation(PyObject *, PyObject *);}
static PyObject *meth_Quat_zeroRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zeroRotation();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_zeroRotation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_length(PyObject *, PyObject *);}
static PyObject *meth_Quat_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_length, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_length2(PyObject *, PyObject *);}
static PyObject *meth_Quat_length2(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length2();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_length2, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_conj(PyObject *, PyObject *);}
static PyObject *meth_Quat_conj(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat(sipCpp->conj());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_conj, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_inverse(PyObject *, PyObject *);}
static PyObject *meth_Quat_inverse(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Quat, &sipCpp))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat(sipCpp->inverse());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_inverse, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Quat_makeRotate(PyObject *, PyObject *);}
static PyObject *meth_Quat_makeRotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        float a2;
        float a3;
        Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_Quat, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->makeRotate(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        const Vec3f* a1;
        Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ9", &sipSelf, sipType_Quat, &sipCpp, &a0, sipType_Vec3f, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->makeRotate(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        float a0;
        const Vec3f* a1;
        float a2;
        const Vec3f* a3;
        float a4;
        const Vec3f* a5;
        Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ9fJ9fJ9", &sipSelf, sipType_Quat, &sipCpp, &a0, sipType_Vec3f, &a1, &a2, sipType_Vec3f, &a3, &a4, sipType_Vec3f, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->makeRotate(a0,*a1,a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const Vec3f* a0;
        const Vec3f* a1;
        Quat *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_Quat, &sipCpp, sipType_Vec3f, &a0, sipType_Vec3f, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->makeRotate(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Quat, sipName_makeRotate, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_Quat___ge__(PyObject *,PyObject *);}
static PyObject *slot_Quat___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    Quat *sipCpp = reinterpret_cast<Quat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Quat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Quat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Quat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->Quat::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,ge_slot,sipType_Quat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Quat___neg__(PyObject *);}
static PyObject *slot_Quat___neg__(PyObject *sipSelf)
{
    Quat *sipCpp = reinterpret_cast<Quat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Quat));

    if (!sipCpp)
        return 0;


    {
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat(-(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_Quat___sub__(PyObject *,PyObject *);}
static PyObject *slot_Quat___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Quat* a0;
        const Quat* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Quat, &a0, sipType_Quat, &a1))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat((*a0 - *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Quat___add__(PyObject *,PyObject *);}
static PyObject *slot_Quat___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Quat* a0;
        const Quat* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Quat, &a0, sipType_Quat, &a1))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat((*a0 + *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Quat___div__(PyObject *,PyObject *);}
static PyObject *slot_Quat___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Quat* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_Quat, &a0, &a1))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat((*a0 / a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    {
        Quat* a0;
        const Quat* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Quat, &a0, sipType_Quat, &a1))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat((*a0 / *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Quat___mul__(PyObject *,PyObject *);}
static PyObject *slot_Quat___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Quat* a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_Quat, &a0, &a1))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    {
        Quat* a0;
        const Quat* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Quat, &a0, sipType_Quat, &a1))
        {
            Quat*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Quat((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Quat,NULL);
        }
    }

    {
        Quat* a0;
        const Vec3f* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Quat, &a0, sipType_Vec3f, &a1))
        {
            Vec3f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec3f((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec3f,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Quat___lt__(PyObject *,PyObject *);}
static PyObject *slot_Quat___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    Quat *sipCpp = reinterpret_cast<Quat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Quat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Quat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Quat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Quat::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,lt_slot,sipType_Quat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Quat___ne__(PyObject *,PyObject *);}
static PyObject *slot_Quat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Quat *sipCpp = reinterpret_cast<Quat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Quat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Quat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Quat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Quat::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,ne_slot,sipType_Quat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Quat___eq__(PyObject *,PyObject *);}
static PyObject *slot_Quat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Quat *sipCpp = reinterpret_cast<Quat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Quat));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Quat* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Quat, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Quat::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,eq_slot,sipType_Quat,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Quat(void *, const sipTypeDef *);}
static void *cast_Quat(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Quat)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Quat(void *, int);}
static void release_Quat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Quat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Quat(void *, SIP_SSIZE_T, const void *);}
static void assign_Quat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Quat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Quat *>(sipSrc);
}


extern "C" {static void *array_Quat(SIP_SSIZE_T);}
static void *array_Quat(SIP_SSIZE_T sipNrElem)
{
    return new Quat[sipNrElem];
}


extern "C" {static void *copy_Quat(const void *, SIP_SSIZE_T);}
static void *copy_Quat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Quat(reinterpret_cast<const Quat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Quat(sipSimpleWrapper *);}
static void dealloc_Quat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Quat(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Quat(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Quat(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Quat *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Quat();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;
        float a2;
        float a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "ffff", &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Quat(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const Vec4f* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Vec4f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Quat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        float a0;
        const Vec3f* a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "fJ9", &a0, sipType_Vec3f, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Quat(a0,*a1);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        float a0;
        const Vec3f* a1;
        float a2;
        const Vec3f* a3;
        float a4;
        const Vec3f* a5;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "fJ9fJ9fJ9", &a0, sipType_Vec3f, &a1, &a2, sipType_Vec3f, &a3, &a4, sipType_Vec3f, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Quat(a0,*a1,a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const Quat* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Quat, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Quat(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Quat[] = {
    {(void *)slot_Quat___ge__, ge_slot},
    {(void *)slot_Quat___neg__, neg_slot},
    {(void *)slot_Quat___sub__, sub_slot},
    {(void *)slot_Quat___add__, add_slot},
    {(void *)slot_Quat___div__, div_slot},
    {(void *)slot_Quat___mul__, mul_slot},
    {(void *)slot_Quat___lt__, lt_slot},
    {(void *)slot_Quat___ne__, ne_slot},
    {(void *)slot_Quat___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Quat[] = {
    {SIP_MLNAME_CAST(sipName_asVec3), meth_Quat_asVec3, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_asVec4), meth_Quat_asVec4, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_conj), meth_Quat_conj, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inverse), meth_Quat_inverse, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_length), meth_Quat_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_length2), meth_Quat_length2, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_makeRotate), meth_Quat_makeRotate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set), meth_Quat_set, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_w), meth_Quat_w, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x), meth_Quat_x, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_y), meth_Quat_y, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_z), meth_Quat_z, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_zeroRotation), meth_Quat_zeroRotation, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef__moogli_Quat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Quat,
        {0}
    },
    {
        sipNameNr_Quat,
        {0, 0, 1},
        13, methods_Quat,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_Quat,
    init_type_Quat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Quat,
    assign_Quat,
    array_Quat,
    copy_Quat,
    release_Quat,
    cast_Quat,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
