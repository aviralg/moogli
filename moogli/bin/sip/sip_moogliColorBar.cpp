/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.9
 */

#include "sipAPI_moogli.h"

#line 612 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include "widgets/ColorBar.hpp"
#line 12 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"

#line 156 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec4f>
using osg::Vec4f;
#line 17 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"
#line 9 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec2i>
using osg::Vec2i;
#line 21 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"
#line 36 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec2f>
using osg::Vec2f;
#line 25 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"
#line 125 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec4i>
using osg::Vec4i;
#line 29 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"


extern "C" {static PyObject *meth_ColorBar_resize(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_ColorBar, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_ColorBar, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_resize, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_parent_viewport(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_parent_viewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ColorBar, &sipCpp, sipType_Vec4i, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_parent_viewport(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_parent_viewport, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_scalar_range(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_scalar_range(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec2f* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ColorBar, &sipCpp, sipType_Vec2f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_scalar_range(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_scalar_range, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_scalar_range(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_scalar_range(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            Vec2f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec2f(sipCpp->get_scalar_range());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec2f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_scalar_range, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_colors(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_colors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BP0", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
#line 653 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
        unsigned int length = PySequence_Length(a0);
        unsigned int i;
        int iserr = 0;
        int state;

        std::vector<osg::Vec4f> colors(length);
        for(i = 0; i < length; ++i)
        {
            osg::Vec4f * color = static_cast<osg::Vec4f *>(sipConvertToType( PySequence_GetItem(a0, i)
                                                                           , sipFindType("Vec4f")
                                                                           , NULL
                                                                           , SIP_NO_CONVERTORS
                                                                           , NULL
                                                                           , &iserr
                                                                           )
                                                          );
            colors[i] = *color;
        }
        sipCpp -> set_colors(colors);
#line 204 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_colors, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_label_count(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_label_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_label_count(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_label_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_label_count(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_label_count(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_label_count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_label_count, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_title(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_title(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_title, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_title(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_title(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 686 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
        sipRes = PyString_FromString(sipCpp -> get_title().c_str());
#line 313 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_title, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_position(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec2f* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ColorBar, &sipCpp, sipType_Vec2f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_position(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_position, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_position(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_position(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            Vec2f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec2f(sipCpp->get_position());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec2f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_position, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_size(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec2f* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ColorBar, &sipCpp, sipType_Vec2f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_size(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_size(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            Vec2f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec2f(sipCpp->get_size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec2f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_orientation(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_orientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_orientation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_orientation(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_orientation();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_orientation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_text_font(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_text_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const char* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bs", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_text_font(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_text_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_text_font(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_text_font(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            PyObject * sipRes = 0;

#line 713 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
        sipRes = PyString_FromString(sipCpp -> get_text_font().c_str());
#line 529 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliColorBar.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_text_font, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_text_font_resolution(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_text_font_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec2i* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ColorBar, &sipCpp, sipType_Vec2i, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_text_font_resolution(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_text_font_resolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_text_font_resolution(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_text_font_resolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            Vec2i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec2i(sipCpp->get_text_font_resolution());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec2i,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_text_font_resolution, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_text_character_size(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_text_character_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_text_character_size(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_text_character_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_text_character_size(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_text_character_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_text_character_size();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_text_character_size, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_text_color(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_text_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4f* a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_ColorBar, &sipCpp, sipType_Vec4f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_text_color(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_text_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_text_color(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_text_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            Vec4f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4f(sipCpp->get_text_color());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_text_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_set_label_formatting_precision(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_set_label_formatting_precision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_ColorBar, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_label_formatting_precision(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_set_label_formatting_precision, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_ColorBar_get_label_formatting_precision(PyObject *, PyObject *);}
static PyObject *meth_ColorBar_get_label_formatting_precision(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const ColorBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_ColorBar, &sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_label_formatting_precision();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ColorBar, sipName_get_label_formatting_precision, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_ColorBar(void *, const sipTypeDef *);}
static void *cast_ColorBar(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_ColorBar)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_ColorBar(void *, int);}
static void release_ColorBar(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<ColorBar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_ColorBar(sipSimpleWrapper *);}
static void dealloc_ColorBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_ColorBar(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_ColorBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_ColorBar(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    ColorBar *sipCpp = 0;

    {
        const char* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "s", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ColorBar(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const ColorBar* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_ColorBar, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new ColorBar(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_ColorBar[] = {
    {SIP_MLNAME_CAST(sipName_get_label_count), meth_ColorBar_get_label_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_label_formatting_precision), meth_ColorBar_get_label_formatting_precision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_orientation), meth_ColorBar_get_orientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_position), meth_ColorBar_get_position, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_scalar_range), meth_ColorBar_get_scalar_range, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_size), meth_ColorBar_get_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_text_character_size), meth_ColorBar_get_text_character_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_text_color), meth_ColorBar_get_text_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_text_font), meth_ColorBar_get_text_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_text_font_resolution), meth_ColorBar_get_text_font_resolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_title), meth_ColorBar_get_title, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resize), meth_ColorBar_resize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_colors), meth_ColorBar_set_colors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_label_count), meth_ColorBar_set_label_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_label_formatting_precision), meth_ColorBar_set_label_formatting_precision, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_orientation), meth_ColorBar_set_orientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_parent_viewport), meth_ColorBar_set_parent_viewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_position), meth_ColorBar_set_position, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_scalar_range), meth_ColorBar_set_scalar_range, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_size), meth_ColorBar_set_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_text_character_size), meth_ColorBar_set_text_character_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_text_color), meth_ColorBar_set_text_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_text_font), meth_ColorBar_set_text_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_text_font_resolution), meth_ColorBar_set_text_font_resolution, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_title), meth_ColorBar_set_title, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef__moogli_ColorBar = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_ColorBar,
        {0}
    },
    {
        sipNameNr_ColorBar,
        {0, 0, 1},
        25, methods_ColorBar,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_type_ColorBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_ColorBar,
    0,
    0,
    0,
    release_ColorBar,
    cast_ColorBar,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
