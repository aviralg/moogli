/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.9
 */

#include "sipAPI_moogli.h"

#line 125 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec4i>
using osg::Vec4i;
#line 13 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliVec4i.cpp"



extern "C" {static PyObject *meth_Vec4i_set(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_Vec4i, &sipCpp, &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_set, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_x(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_x(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_x, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_y(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_y(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_y, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_z(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_z(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->z();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_z, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_w(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_w(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->w();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_w, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_r(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_r(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->r();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_r, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_g(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_g(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->g();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_g, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_b(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_b(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->b();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_b, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Vec4i_a(PyObject *, PyObject *);}
static PyObject *meth_Vec4i_a(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Vec4i, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->a();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_a, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_Vec4i___ge__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    Vec4i *sipCpp = reinterpret_cast<Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Vec4i* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vec4i, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->Vec4i::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,ge_slot,sipType_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Vec4i___sub__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Vec4i* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_Vec4i, &a0, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 - a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    {
        Vec4i* a0;
        const Vec4i* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vec4i, &a0, sipType_Vec4i, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 - *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Vec4i___add__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Vec4i* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_Vec4i, &a0, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 + a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    {
        Vec4i* a0;
        const Vec4i* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vec4i, &a0, sipType_Vec4i, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 + *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Vec4i___div__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Vec4i* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_Vec4i, &a0, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 / a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Vec4i___mul__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        Vec4i* a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_Vec4i, &a0, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 * a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    {
        Vec4i* a0;
        const Vec4i* a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_Vec4i, &a0, sipType_Vec4i, &a1))
        {
            Vec4i*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4i((*a0 * *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Vec4i___lt__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    Vec4i *sipCpp = reinterpret_cast<Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Vec4i* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vec4i, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Vec4i::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,lt_slot,sipType_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Vec4i___ne__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Vec4i *sipCpp = reinterpret_cast<Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Vec4i* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vec4i, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Vec4i::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,ne_slot,sipType_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Vec4i___eq__(PyObject *,PyObject *);}
static PyObject *slot_Vec4i___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Vec4i *sipCpp = reinterpret_cast<Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const Vec4i* a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_Vec4i, &a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Vec4i::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__moogli,eq_slot,sipType_Vec4i,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Vec4i(void *, const sipTypeDef *);}
static void *cast_Vec4i(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Vec4i)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Vec4i(void *, int);}
static void release_Vec4i(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Vec4i *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Vec4i(void *, SIP_SSIZE_T, const void *);}
static void assign_Vec4i(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Vec4i *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Vec4i *>(sipSrc);
}


extern "C" {static void *array_Vec4i(SIP_SSIZE_T);}
static void *array_Vec4i(SIP_SSIZE_T sipNrElem)
{
    return new Vec4i[sipNrElem];
}


extern "C" {static void *copy_Vec4i(const void *, SIP_SSIZE_T);}
static void *copy_Vec4i(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Vec4i(reinterpret_cast<const Vec4i *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Vec4i(sipSimpleWrapper *);}
static void dealloc_Vec4i(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Vec4i(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Vec4i(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Vec4i(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Vec4i *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Vec4i();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Vec4i(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const Vec4i* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Vec4i, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Vec4i(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Vec4i[] = {
    {(void *)slot_Vec4i___ge__, ge_slot},
    {(void *)slot_Vec4i___sub__, sub_slot},
    {(void *)slot_Vec4i___add__, add_slot},
    {(void *)slot_Vec4i___div__, div_slot},
    {(void *)slot_Vec4i___mul__, mul_slot},
    {(void *)slot_Vec4i___lt__, lt_slot},
    {(void *)slot_Vec4i___ne__, ne_slot},
    {(void *)slot_Vec4i___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_Vec4i[] = {
    {SIP_MLNAME_CAST(sipName_a), meth_Vec4i_a, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_b), meth_Vec4i_b, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_g), meth_Vec4i_g, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_r), meth_Vec4i_r, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set), meth_Vec4i_set, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_w), meth_Vec4i_w, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x), meth_Vec4i_x, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_y), meth_Vec4i_y, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_z), meth_Vec4i_z, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef__moogli_Vec4i = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Vec4i,
        {0}
    },
    {
        sipNameNr_Vec4i,
        {0, 0, 1},
        9, methods_Vec4i,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_Vec4i,
    init_type_Vec4i,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Vec4i,
    assign_Vec4i,
    array_Vec4i,
    copy_Vec4i,
    release_Vec4i,
    cast_Vec4i,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
