/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.16.9
 */

#include "sipAPI_moogli.h"

#line 393 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include "shapes/Frustum.hpp"
#line 12 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliFrustum.cpp"

#line 93 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec3f>
using  osg::Vec3f;
#line 17 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliFrustum.cpp"
#line 156 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/moogli.sip"
#include <osg/Vec4f>
using osg::Vec4f;
#line 21 "/home1/dilawars/Work/GITHUB/BhallaLab/moogli/moogli/bin/sip/sip_moogliFrustum.cpp"


extern "C" {static PyObject *meth_Frustum_set_geometry(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        const Vec3f* a1;
        float a2;
        float a3;
        float a4;
        uint a5;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9fffu", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, sipType_Vec3f, &a1, &a2, &a3, &a4, &a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_geometry(*a0,*a1,a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const Vec3f* a0;
        const Vec3f* a1;
        float a2;
        float a3;
        uint a4;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9ffu", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, sipType_Vec3f, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_geometry(*a0,*a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_geometry, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        const Vec3f* a1;
        float a2;
        float a3;
        float a4;
        uint a5;
        const Vec4f* a6;
        const Vec4f* a7;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9fffuJ9J9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, sipType_Vec3f, &a1, &a2, &a3, &a4, &a5, sipType_Vec4f, &a6, sipType_Vec4f, &a7))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set(*a0,*a1,a2,a3,a4,a5,*a6,*a7);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const Vec3f* a0;
        const Vec3f* a1;
        float a2;
        float a3;
        uint a4;
        const Vec4f* a5;
        const Vec4f* a6;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9ffuJ9J9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, sipType_Vec3f, &a1, &a2, &a3, &a4, sipType_Vec4f, &a5, sipType_Vec4f, &a6))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set(*a0,*a1,a2,a3,a4,*a5,*a6);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_vertices(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_vertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_vertices(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_vertices, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_vertices(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_vertices(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_vertices();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_vertices, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_axis(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_axis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_axis(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_axis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_axis(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_axis(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            Vec3f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec3f(sipCpp->get_axis());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec3f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_axis, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_length(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_length(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_length, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_length(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_length(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_length();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_length, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_center(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_center(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_center, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_center(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            Vec3f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec3f(sipCpp->get_center());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec3f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_center, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_apex(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_apex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_apex(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_apex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_apex(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_apex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            Vec3f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec3f(sipCpp->get_apex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec3f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_apex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_base(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_base(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_base(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_base, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_base(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_base(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            Vec3f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec3f(sipCpp->get_base());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec3f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_base, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_base_radius(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_base_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_base_radius(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_base_radius, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_base_radius(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_base_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_base_radius();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_base_radius, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_apex_radius(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_apex_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_apex_radius(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_apex_radius, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_apex_radius(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_apex_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get_apex_radius();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_apex_radius, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_radii(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_radii(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bff", &sipSelf, sipType_Frustum, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_radii(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_radii, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_radius(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_radius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_radius(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_radius, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_base_color(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_base_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec4f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_base_color(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_base_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_apex_color(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_apex_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec4f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_apex_color(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_apex_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_base_color(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_base_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            Vec4f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4f(sipCpp->get_base_color());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_base_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_get_apex_color(PyObject *, PyObject *);}
static PyObject *meth_Frustum_get_apex_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_Frustum, &sipCpp))
        {
            Vec4f*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Vec4f(sipCpp->get_apex_color());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Vec4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_get_apex_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_color(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_color(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec4f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_color(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_color, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_set_colors(PyObject *, PyObject *);}
static PyObject *meth_Frustum_set_colors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec4f* a0;
        const Vec4f* a1;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec4f, &a0, sipType_Vec4f, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->set_colors(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_set_colors, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_move_apex_by(PyObject *, PyObject *);}
static PyObject *meth_Frustum_move_apex_by(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->move_apex_by(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_move_apex_by, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_move_base_by(PyObject *, PyObject *);}
static PyObject *meth_Frustum_move_base_by(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_Frustum, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->move_base_by(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_move_base_by, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_move_apex_along(PyObject *, PyObject *);}
static PyObject *meth_Frustum_move_apex_along(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        float a1;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9f", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->move_apex_along(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_move_apex_along, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_move_base_along(PyObject *, PyObject *);}
static PyObject *meth_Frustum_move_base_along(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        float a1;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9f", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->move_base_along(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_move_base_along, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_move_center_by(PyObject *, PyObject *);}
static PyObject *meth_Frustum_move_center_by(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->move_center_by(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_move_center_by, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_Frustum_rotate_axis_along(PyObject *, PyObject *);}
static PyObject *meth_Frustum_rotate_axis_along(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const Vec3f* a0;
        float a1;
        Frustum *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9f", &sipSelf, sipType_Frustum, &sipCpp, sipType_Vec3f, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->rotate_axis_along(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Frustum, sipName_rotate_axis_along, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Frustum(void *, const sipTypeDef *);}
static void *cast_Frustum(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_Frustum)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_MoogliShape)->ctd_cast((MoogliShape *)(Frustum *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Frustum(void *, int);}
static void release_Frustum(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Frustum *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Frustum(sipSimpleWrapper *);}
static void dealloc_Frustum(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Frustum(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_type_Frustum(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_Frustum(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    Frustum *sipCpp = 0;

    {
        const char* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "s", &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Frustum(a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const char* a0;
        const Vec3f* a1;
        const Vec3f* a2;
        float a3;
        float a4;
        float a5;
        uint a6;
        const Vec4f* a7;
        const Vec4f* a8;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "sJ9J9fffuJ9J9", &a0, sipType_Vec3f, &a1, sipType_Vec3f, &a2, &a3, &a4, &a5, &a6, sipType_Vec4f, &a7, sipType_Vec4f, &a8))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Frustum(a0,*a1,*a2,a3,a4,a5,a6,*a7,*a8);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const char* a0;
        const Vec3f* a1;
        const Vec3f* a2;
        float a3;
        float a4;
        uint a5;
        const Vec4f* a6;
        const Vec4f* a7;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "sJ9J9ffuJ9J9", &a0, sipType_Vec3f, &a1, sipType_Vec3f, &a2, &a3, &a4, &a5, sipType_Vec4f, &a6, sipType_Vec4f, &a7))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Frustum(a0,*a1,*a2,a3,a4,a5,*a6,*a7);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const Frustum* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_Frustum, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Frustum(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Frustum[] = {{3, 255, 1}};


static PyMethodDef methods_Frustum[] = {
    {SIP_MLNAME_CAST(sipName_get_apex), meth_Frustum_get_apex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_apex_color), meth_Frustum_get_apex_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_apex_radius), meth_Frustum_get_apex_radius, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_axis), meth_Frustum_get_axis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_base), meth_Frustum_get_base, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_base_color), meth_Frustum_get_base_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_base_radius), meth_Frustum_get_base_radius, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_center), meth_Frustum_get_center, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_length), meth_Frustum_get_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get_vertices), meth_Frustum_get_vertices, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_move_apex_along), meth_Frustum_move_apex_along, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_move_apex_by), meth_Frustum_move_apex_by, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_move_base_along), meth_Frustum_move_base_along, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_move_base_by), meth_Frustum_move_base_by, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_move_center_by), meth_Frustum_move_center_by, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotate_axis_along), meth_Frustum_rotate_axis_along, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set), meth_Frustum_set, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_apex), meth_Frustum_set_apex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_apex_color), meth_Frustum_set_apex_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_apex_radius), meth_Frustum_set_apex_radius, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_axis), meth_Frustum_set_axis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_base), meth_Frustum_set_base, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_base_color), meth_Frustum_set_base_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_base_radius), meth_Frustum_set_base_radius, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_center), meth_Frustum_set_center, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_color), meth_Frustum_set_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_colors), meth_Frustum_set_colors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_geometry), meth_Frustum_set_geometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_length), meth_Frustum_set_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_radii), meth_Frustum_set_radii, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_radius), meth_Frustum_set_radius, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_set_vertices), meth_Frustum_set_vertices, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef__moogli_Frustum = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Frustum,
        {0}
    },
    {
        sipNameNr_Frustum,
        {0, 0, 1},
        32, methods_Frustum,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_Frustum,
    0,
    init_type_Frustum,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Frustum,
    0,
    0,
    0,
    release_Frustum,
    cast_Frustum,
    0,
    0,
    0,
    0,
    0,
    0
},
    0,
    0,
    0
};
