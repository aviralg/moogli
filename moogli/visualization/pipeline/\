from abc import ABCMeta, abstractmethod


class VisualizationTime():
    """
    """

    def __init__(self):
        self.begin = 1.0
        self.end = 0.0
        self.interval = 1.0
        self.tick = -1

    @property
    def begin(self):
        return self._begin

    @begin.setter
    def begin(self, value):
        self._begin = value

    @property
    def end(self):
        return self._end

    @end.setter
    def end(self, value):
        self._end = value

    @property
    def interval(self):
        return self._interval

    @interval.setter
    def interval(self, value):
        self._interval = value

    @property
    def tick(self):
        return self._tick

    @tick.setter
    def tick(self, value):
        self._tick = value

    @property
    def now(self):
        return self.begin + self.tick * self.interval


class PipelineElement():
    """Some Documentation
    """
    __metaclass__ = ABCMeta

    def __init__(self):
        self._sources = set()
        self._sinks = set()

    @property
    def visualization_time(self):
        return self._visualization_time

    @visualization_time.setter
    def visualization_time(self, value):
        self._visualization_time = value

    def _sink(self, element):
        self._sinks.add(element)
        element._sources.add(self)

    def _unsink(self, element):
        self._sinks.remove(element)
        element._sources.remove(self)

    def _sink_all(self, elements):
        map(self._sink, elements)

    def _unsink_all(self, elements):
        map(self._unsink, elements)

    def _sinks(self):
        return tuple(self._sinks)

    def _source(self, element):
        self._sources.add(element)
        element._sinks.add(self)

    def _unsource(self, element):
        self._sources.remove(element)
        element._sinks.remove(self)

    def _source_all(self, elements):
        map(self._source, elements)

    def _unsource_all(self, elements):
        map(self._unsource, elements)

    def _sources(self):
        return tuple(self._sources)

    @abstractmethod
    def rewind(self):
        pass

    @abstractmethod
    def reinit(self):
        pass

        # SimulationData ->
#    simulation_variable / visid1 - value
#                        / visid2 - value
#                        / visid3 - value

# VisualizationData ->
#     visualization_variable
