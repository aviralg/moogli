from .pipeline import PipelineElement
from abc import ABCMeta, abstractmethod


class Producer(PipelineElement):
    __metaclass__ = ABCMeta

    def __init__(self):
        super(Producer, self).__init__()
        self.output = None

    def connect(self, mediator):
        self._sink(mediator)

    def disconnect(self, mediator=None):
        if mediator is None:
            self._unsink_all(self._sinks())
        else:
            self._unsink(mediator)

    @property
    def mediators(self):
        return self._sinks()

    @mediators.setter
    def mediators(self, values):
        self._unsink_all(self._sinks())
        self._sink_all(values)

    @property
    def output(self):
        return self._output

    @output.setter
    def output(self, value):
        self._output = value

    @abstractmethod
    def produce(self):
        pass


class SimulationDataProducer(Producer):

    def __init__(self):
        super(self, SimulationDataProducer).__init__(self)
        self.output = SimulationData()

    def produce(self):
        pass
