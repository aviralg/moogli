from abc import ABCMeta, abstractmethod

class PipelineElement:
    __metaclass__ = ABCMeta

    def __init__(self):
        self.input  = None
        self.output = None
        self.tick   = None

    @property
    def tick(self):
        return self._tick

    @tick.setter
    def tick(self, value):
        self._tick = value

    @property
    def output(self):
        return self._output

    @output.setter
    def output(self, value):
        self._output = value

    @property
    def input(self):
        return self._input

    @input.setter
    def input(self, value):
        self._input = value

    def rewind(self):
        pass

    def reinit(self):
        pass

class Producer(PipelineElement):
    __metaclass__ = ABCMeta

    def __init__(self):
        super(Producer, self).__init__()
        self._mediators = set()

    def connect(self, mediator):
        self._mediators.add(mediator)

    def disconnect(self, mediator = None):
        if mediator is None:
            self._mediators.clear()
        else:
            self._mediators.remove(mediator)

    @property
    def mediators(self):
        return tuple(self._mediators)

    @mediators.setter
    def mediators(self, values):
        self._mediators.clear()
        self._mediators.update(values)

    @abstractmethod
    def produce(self):
        pass

class Mediator(PipelineElement):
    __metaclass__ = ABCMeta

    def __init__(self):
        super(Mediator, self).__init__()

    @abstractmethod
    def mediate(self):
        pass

    def connect(self, consumer):
        self._consumers.add(consumer)

    def disconnect(self, consume = None):
        if mediator is None:
            self._mediators.clear()
        else:
            self._mediators.remove(mediator)

class Consumer(PipelineElement):
    __metaclass__ = ABCMeta

    def __init__(self):
        super(Consumer, self).__init__()

    @abstractmethod
    def consume(self):
        pass

class SimulationData(object):
    def __init__(self):
        self._data = {}

    def register(self, simulation_variable):
        self._data[simulation_variable] = {}

    def is_registered(self, simulation_variable):
        return simulation_variable in self._data

    def set(self, simulation_variable, visualizable, value):
        self._data[simulation_variable][visualizable] = value

    def get(self, simulation_variable, visualizable):
        return self._data[simulation_variable][visualizable]

    def clear(self):
        for simulation_variable in self._data:
            self._data[simulation_variable] = {}


class SimulationDataMediator(Mediator):
    def __init__( self
                , simulation_variable
                , visualization_variable
                , normalizer
                , mapper
                ):
        super(SimulationDataMediator, self).__init__()
        self.output = []

    def mediate(self):
        map(lambda visval : self._mediate(*visval), self.input.items())

    def _mediate(self, visualizable, value):
            self.parameter[visualizable] = self.__normalizer( value
                                                        , self._parameter.get( visualizable
                                                                              , self.default_parameter
                                                                              )
                                                        )
            result = self.__mapper(self._parameter[visualizable])
            self._buffer[:] = []
        return result

    def rewind(self):
        self.output = {}

    def reinit(self):
        self.output = {}


class VisualizationEnvironment(QWidget):
    def __init__(self):
        self.pipelines = {}

    def producers(self):
        return tuple(self._pipelines.keys())

    def mediators(self):
        result = set()
        for producer in self._pipelines:
            for mediator in self._pipelines[producer]:
                result.add(mediator)
        return tuple(result)

    def consumers(self):
        result = set()
        for producer in self._pipelines:
            for mediator in self._pipelines[producer]:
                for consumer in self._pipeline[producer][mediator]:
                    result.add(consumer)
        return tuple(result)

    @property
    def pipelines(self):
        result = []
        for producer in self._pipelines:
            for mediator in self._pipelines[producer]:
                for consumer in self._pipeline[producer][mediator]:
                    result.append((producer, mediator, consumer))
        return result

    @pipelines.setter
    def pipelines(self, values):
        for value in values: self.connect(*value)

    def connect(producer, mediator, consumer):
        self._pipelines[producer] = self._pipelines.get(producer, {})
        self._pipelines[producer][mediator] = self._pipelines[producer].get(mediator,set())
        self._pipelines[producer][mediator].add(consumer)

    def disconnect(producer, mediator = None, consumer = None):
        if mediator is None and consumer is None:
            del self._pipelines[producer]
        elif mediator is not None and consumer is None:
            del self._pipelines[producer][mediator]
        elif mediator is not None and consumer is not None:
            self._pipelines[producer][mediator].remove(consumer)
        elif mediator is None and consumer is not None:
            for (mediator, consumers) in self._pipelines[producer].items():
                if consumer in consumers:
                    consumers.remove(consumer)



    def produce(self):
        for producer in self.producers:
            producer.tick = self.tick
            producer.produce()

        for producer in self.pipelines.keys():
            mediators = self.pipelines[producer].keys()
            for mediator in mediators:
                mediator.input.update(producer.output)

    def mediate(self):
        for mediator in self.mediators:
            mediator.tick = self.tick
            mediator.mediate()

        for producer in self.pipelines.keys():
            mediators = self.pipelines[producer].keys()
            for mediator in mediators:
                consumers = self.pipelines[producer][mediator]
                for consumer in consumers:
                    consumer.input.update(mediator.output)

    def consume(self):
        for consumer in self.consumers:
            consumer.tick = self.tick
            consumer.consume()

    def advance():
        self.tick = self.tick + 1
        self.advance_producers()
        self.stream_producer_output()
        self.advance_mediators()
        self.stream_mediator_output()
        self.advance_consumers()


class MediationRule:
    def __init__( self
                , simulation_variable
                , visualization_variable
                , normalizer
                , mapper
                ):
        self._simulation_variable    = simulation_variable
        self._visualization_variable = visualization_variable
        self.normalizer              = normalizer
        self.mapper                  = mapper
        self._history                = {}

    @property
    def simulation_variable(self):
        return self._simulation_variable

    @property
    def visualization_variable(self):
        return self._visualization_variable

    @property
    def normalizer(self):
        return self._normalizer

    @normalizer.setter
    def normalizer(self, value):
        self.__normalizer = self._normalizer = value
        if value is None: self.__normalizer = identity

    @property
    def mapper(self):
        return self._mapper

    @mapper.setter
    def mapper(self, value):
        self.__mapper = self._mapper = value
        if value is None: self.__mapper = identity

    # @property
    # def thresholder(self):
    #     return self._thresholder

    # @thresholder.setter
    # def thresholder(self, value):
    #     self._thresholder = value

    @property
    def downsampler(self):
        return self._downsampler

    @downsampler.setter
    def downsampler(self, value):
        self.__downsampler = self._downsampler = value
        if self.__downsampler is None:
            self.__downsampler = Downsampler.identity()


    def rewind(self):
        self._history = {}

    def reset(self):
        self._history = {}

    def __call__(visualizable, value):


class Downsampler:
    def __init__(self, factor, method):
        self.

    def __call__(self, values):
        pass


class SimulationDataProducer(Producer):

    def __init__(self, ):



    def produce(self):


    pass

class NsdfSimulationDataProducer(SimulationDataProducer):
    pass

class MooseDataProducer




class Mediator:
    __metaclass__ = ABCMeta

    def __init__(self):
        self._buffer = []

    def mediate()
    def peek(self):
        pass

    def pop(self):
        pass

    def push(self):
        pass

    def rewind(self):
        pass

    def reinit(self):
        pass

    def clear

        pass
    def mediate():
        pass


RADIUS
LENGTH
COLOR

class SimulationData():
    pass

class VisualizationData():


class Consumer():
    def __init__(self):
        pass

    def consume(self, tick, time):
        pass



class SimulationDataProducer(Producer):
    def __init__(self):
        Producer.__init__()

    def produce(self, tick, time):
        self.tick

    def rewind(self, tick = 0):
        pass

    def reinit(self):
        pass

    def tick(self):
        return self._tick
